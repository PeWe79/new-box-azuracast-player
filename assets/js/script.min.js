"use strict"; const musicData = []; function fetchData() { fetch(apiUrl + "/api/nowplaying").then((t => (t.ok || checkError("Failed to load API data", (() => location.reload())), t.json()))).then((t => { t.forEach((t => { const e = Math.floor(5 * Math.random()), a = ".jpg".split("/").pop(); musicData.push({ imgBrand: apiUrl + "/static/uploads/" + t.station.shortcode + "/album_art." + e + a, bgimg: t.now_playing.song.art, np: t.now_playing.song, name: t.station.name, streamUrl: t.station.listen_url, api: apiUrl + "/api/nowplaying_static/" + t.station.shortcode + ".json", played_at: t.now_playing.played_at, history: t.song_history }) })), processData() })).catch((t => { console.error("Error fetching JSON:", t) })) } function checkError(t) { console.error("Error loading data:", t) } function processData() { const t = function (t, e, a) { for (let n = 0, s = t.length; n < s; n++)t[n].addEventListener(e, a) }, e = document.querySelector("[data-music-list]"); for (let t = 0, a = musicData.length; t < a; t++)e.innerHTML += `\n  <li>\n    <p class="label-md" id="station">${musicData[t].name}</p>\n    <button class="music-item ${0 === t ? "playing" : ""}" data-playlist-toggler data-playlist-item="${t}">\n      <img src="${musicData[t].imgBrand}" width="800" height="800" alt="${musicData[t].title} Album Poster"\n        class="img-cover">\n\n      <div class="item-icon">\n        <span class="material-symbols-rounded">equalizer</span>\n      </div>\n    </button>\n  </li>\n  `; const a = document.querySelector("[data-playlist]"), n = document.querySelectorAll("[data-playlist-toggler]"), s = document.querySelector("[data-overlay]"); t(n, "click", (function () { a.classList.toggle("active"), s.classList.toggle("active"), document.body.classList.toggle("modalActive") })); const i = document.querySelectorAll("[data-playlist-item]"); let r = 0, o = 0; const l = function () { i[o].classList.remove("playing"), i[r].classList.add("playing") }; t(i, "click", (function () { o = r, r = Number(this.dataset.playlistItem), l() })); const c = document.querySelector("[data-player-banner]"), u = document.querySelector("[data-title]"), m = document.querySelector("[data-album]"), d = document.querySelector("[data-artist]"), p = new Audio(musicData[r].streamUrl), g = function () { c.setAttribute("alt", `${musicData[r].np.title} Album Poster`), u.textContent = musicData[r].np.title, m.textContent = musicData[r].np.album, d.textContent = musicData[r].np.artist, E(musicData[r].api), p.src = musicData[r].streamUrl, h() }; t(i, "click", g); const y = document.querySelector("[data-play-btn]"); const h = function () { p.volume = 1, p.paused ? (p.play(), y.classList.add("active")) : (p.pause(), y.classList.remove("active"), clearInterval(undefined)) }; y.addEventListener("click", h); document.querySelector("[data-skip-next]").addEventListener("click", (function () { o = r, r >= musicData.length - 1 ? r = 0 : r++, g(), l() })); document.querySelector("[data-skip-prev]").addEventListener("click", (function () { o = r, r <= 0 ? r = musicData.length - 1 : r--, g(), l() })); const f = document.querySelector("[data-history]"), b = document.querySelector("[close-history-modal]"); f.addEventListener("click", (() => { v(musicData[r].history), document.getElementById("historyModal").classList.remove("hidden") })), b.addEventListener("click", (() => { document.getElementById("historyModal").classList.add("hidden") })); const w = document.querySelector("[song-history-list]"), v = function (t) { w.innerHTML = "", Array.isArray(t) && t.length > 0 ? t.forEach((async t => { if (!t.song.title || !t.song.artist) return; const e = await L(t.song, !1), a = t.played_at, n = e.art, s = document.createElement("li"); s.className = "py-2 flex items-center", s.innerHTML = `\n                    ${n ? `<img class="rounded-lg object-cover" src="${n}" width="100" alt="${t.title} artwork">` : ""}\n                    <div class="ml-3 flex-grow">\n                        <p class="text-2xl font-bold text-white text-left">${t.song.title}</p>\n                        <p class="text-medium text-gray-400 text-left">${t.song.artist}</p>\n                        <p class="text-xs text-gray-900 mt-1 text-left">${D(x(a))}</p>\n                    </div>\n                `, w.appendChild(s) })) : w.innerHTML = '<li class="py-2 flex items-center justify-center"><img src="./assets/images/spinner.svg" alt="Loading..." class="animate-spin h-30 w-30"></li>' }, x = function (t) { return new Date(1e3 * t) }, D = function (t) { const e = { day: 86400, hour: 3600, minute: 60, second: 1 }; return (t => { const a = new Intl.RelativeTimeFormat("en"), n = (t => (Date.now() - t) / 1e3)(t), { value: s, unit: i } = (t => { for (const [a, n] of Object.entries(e)) if (t >= n || "second" === a) return { value: Math.floor(Math.abs(t / n)), unit: a } })(n), r = n > 0 ? -s : s; return a.format(r, i) })(new Date(t)) }, k = async function (t) { const e = t.text, a = t.art, n = await fetch(`https://itunes.apple.com/search?limit=1&term=${encodeURIComponent(e)}`); if (403 === n.status) return { title: t.title, artist: t.artist, album: t.album, art: a }; const s = n.ok ? await n.json() : {}; if (!s.results || 0 === s.results.length) return { title: t.title, artist: t.artist, album: t.album, art: a }; const i = s.results[0], r = { title: i.trackName || t.title, artist: i.artistName || t.artist, album: i.collectionName || t.album, art: i.artworkUrl100.replace("100x100", "512x512") || a }; return c.src = r.art, document.getElementById("artwork").src = r.art, document.body.style.backgroundImage = `url(${r.art})`, c.setAttribute("alt", `${r.title} Album Poster`), "mediaSession" in navigator && (navigator.mediaSession.metadata = new MediaMetadata({ title: t.title, artist: t.artist, artwork: [{ src: r.art, sizes: "512x512", type: "image/png" }] })), r }, L = async function (t) { const e = t.text, a = t.art, n = await fetch(`https://itunes.apple.com/search?limit=1&term=${encodeURIComponent(e)}`); if (403 === n.status) return { title: t.title, artist: t.artist, album: t.album, art: a }; const s = n.ok ? await n.json() : {}; if (!s.results || 0 === s.results.length) return { title: t.title, artist: t.artist, album: t.album, art: a }; const i = s.results[0]; var r, o; return { title: i.trackName || t.title, artist: i.artistName || t.artist, album: i.collectionName || t.album, art: i.artworkUrl100 ? (r = i.artworkUrl100.replace("100x100", "512x512"), r.replace(/"100x100"/, o)) : a } }; async function E(t) { try { const e = await (await fetch(t)).json(), a = musicData[r], n = e.now_playing.song.artist || a.artist, s = e.now_playing.song.title || a.title, i = e.now_playing.song.album || a.album, o = "https://open.spotify.com/search/" + encodeURIComponent(n + " - " + s); document.getElementById("spotify").href = o, document.getElementById("title").innerHTML = s, document.title = n + " - " + s, document.getElementById("album").innerHTML = i || "N/A", document.getElementById("artist").innerHTML = n; const l = e.now_playing.song; k(l) } catch (t) { console.error("Error fetching data:", t) } } setInterval((() => { E(musicData[r].api) }), 7e3) } fetchData();